#version 400 core

const int maxLightCount = 4;				// Multiple Lights

in vec2 pass_textureCoords;
in vec3 surfaceNormal;						// Per-Pixel Lighting
in vec3 toLightVector[maxLightCount];		// Per-Pixel Lighting
in vec3 toCameraVector;						// Specular Lighting
in float visibility;						// Fog

uniform sampler2D modelTexture;
uniform vec3 lightColor[maxLightCount];		// Per-Pixel Lighting
uniform vec3 lightAttenuation[maxLightCount];	// Point Lights
uniform float shineDamper;					// Specular Lighting
uniform float reflectivity;					// Specular Lighting
uniform vec3 skyColor;						// Fog
uniform float minDiffuseLighting;			// Per-Pixel Lighting
uniform float minSpecularLighting;			// Specular Lighting

out vec4 out_Color;

void main(){

	vec3 normalizedSurfaceNormal = normalize(surfaceNormal);											// Per-Pixel Lighting - Specular Lighting
	vec3 normalizedToCameraVector = normalize(toCameraVector);											// Specular Lighting

	vec3 totalDiffuseLighting = vec3(0.0);																// Per-Pixel Lighting - Specular Lighting
	vec3 totalSpecularLighting = vec3(0.0);																// Per-Pixel Lighting - Specular Lighting
	
	for(int i=0;i<4;i++){
		float distance = length(toLightVector[i]);
		float attFactor = lightAttenuation[i].x + (lightAttenuation[i].y * distance) + (lightAttenuation[i].z * distance * distance);
		vec3 unitLightVector = normalize(toLightVector[i]);	
		float nDotl = dot(unitNormal,unitLightVector);
		float brightness = max(nDotl,0.0);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		float specularFactor = dot(reflectedLightDirection , unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float dampedFactor = pow(specularFactor,shineDamper);
		totalDiffuse = totalDiffuse + (brightness * lightColor[i])/attFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColor[i])/attFactor;
	}
	totalDiffuseLighting = max(totalDiffuseLighting, minDiffuseLighting);
	totalSpecularLighting = max(totalSpecularLighting, minSpecularLighting);
	
	vec4 textureColor = texture(modelTexture, pass_textureCoords);
	if(textureColor.a < 0.5){
		discard;
	}

	out_Color = vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);


	out_Color = vec4(totalDiffuseLighting, 1.0) * texture(modelTexture, pass_textureCoords) + vec4(totalSpecularLighting, 1.0);

}
