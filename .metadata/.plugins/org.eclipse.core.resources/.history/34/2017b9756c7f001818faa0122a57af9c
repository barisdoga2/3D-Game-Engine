#version 400 core

const int maxLightCount = 4;				// Multiple Lights

in vec3 position;
in vec2 textureCoords;
in vec3 normal;								// Per-Pixel Lighting

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform vec3 lightPositionEyeSpace[maxLightCount];	// Per-Pixel Lighting
uniform float useFakeLighting;				// For 2D Objects
uniform float atlasNumberOfRows;			// Texture Atlases
uniform vec2 atlasOffsets;					// Texture Atlases
uniform float densityOfFog;					// Fog
uniform float gradientOfFog;				// Fog
uniform vec4 plane;

out vec2 pass_textureCoords;
out vec3 surfaceNormal; 					// Per-Pixel Lighting
out vec3 toLightVector[maxLightCount];		// Per-Pixel Lighting
out vec3 toCameraVector;					// Specular Lighting
out float visibility;						// Fog

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;

void main(void){

	vec4 worldPosition = transformationMatrix * vec4(position,1.0);
	gl_ClipDistance[0] = dot(worldPosition, plane);
	mat4 modelViewMatrix = viewMatrix * transformationMatrix;
	vec4 positionRelativeToCam = modelViewMatrix * vec4(position,1.0);
	gl_Position = projectionMatrix * positionRelativeToCam;

	pass_textureCoordinates = (textureCoordinates/numberOfRows) + offset;

	surfaceNormal = (modelViewMatrix * vec4(normal,0.0)).xyz;
	for(int i=0;i<4;i++){
		toLightVector[i] = lightPositionEyeSpace[i] - positionRelativeToCam.xyz;
	}
	toCameraVector = -positionRelativeToCam.xyz;
	
	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance*density),gradient));
	visibility = clamp(visibility,0.0,1.0);
	
}
