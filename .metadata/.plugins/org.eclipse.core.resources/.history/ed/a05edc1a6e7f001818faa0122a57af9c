package dev.engine.renderEngine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.lwjgl.opengl.GL11;
import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import dev.engine.entities.Camera;
import dev.engine.entities.Entity;
import dev.engine.entities.Light;
import dev.engine.models.TexturedModel;
import dev.engine.renderEngine.entities.EntityRenderer;
import dev.engine.renderEngine.entities.EntityShader;
import dev.engine.renderEngine.entities.NMEntityRenderer;
import dev.engine.renderEngine.entities.NMEntityShader;
import dev.engine.renderEngine.terrains.TerrainRenderer;
import dev.engine.renderEngine.terrains.TerrainShader;
import dev.engine.skybox.SkyboxRenderer;
import dev.engine.skybox.SkyboxShader;
import dev.engine.terrains.Terrain;
import dev.engine.utils.Maths;

public class MasterRenderer {

	private Matrix4f projectionMatrix;
	private Vector3f skyColor;

	private EntityShader entityShader;
	private EntityRenderer entityRenderer;
	private Map<TexturedModel, List<Entity>> allEntities = new HashMap<TexturedModel, List<Entity>>();
	
	private NMEntityShader nmEntityShader;
	private NMEntityRenderer nmEntityRenderer;
	private Map<TexturedModel, List<Entity>> allNMEntities = new HashMap<TexturedModel, List<Entity>>();

	private TerrainShader terrainShader;
	private TerrainRenderer terrainRenderer;
	private List<Terrain> allTerrains = new ArrayList<Terrain>();
  
	private SkyboxShader skyboxShader;
	private SkyboxRenderer skyboxRenderer;
  
	public MasterRenderer(dev.engine.loaders.mapLoader.Map map) {
		MasterRenderer.EnableCulling();
		this.projectionMatrix = Maths.createProjectionMatrix();
		this.skyColor = map.getSkyColor();

		this.entityShader = new EntityShader();
		this.entityRenderer = new EntityRenderer(entityShader, projectionMatrix, map);

		this.terrainShader = new TerrainShader();
		this.terrainRenderer = new TerrainRenderer(terrainShader, projectionMatrix, map);
		
		this.skyboxShader = new SkyboxShader();
		this.skyboxRenderer = new SkyboxRenderer(skyboxShader, projectionMatrix, map);
		
		this.nmEntityShader = new NMEntityShader();
		this.nmEntityRenderer = new NMEntityRenderer(nmEntityShader, projectionMatrix, map);
	}

	public void render(List<Light> lights, Camera camera) {
		prepare();
		
		// Rendering Skybox
		skyboxRenderer.render(camera);
		
		// Rendering Terrains
		terrainShader.start();
		terrainShader.loadLights(lights);
		terrainShader.loadViewMatrix(camera);
		terrainRenderer.render(allTerrains);
		terrainShader.stop();
		allTerrains.clear();
		
		// Rendering Entities
		entityShader.start();
		entityShader.loadLights(lights);
		entityShader.loadViewMatrix(camera);
		entityRenderer.render(allEntities);
		entityShader.stop();
		allEntities.clear();
		
		// Rendering NMEntities
		nmEntityShader.start();
		GL11.glEnable(GL11.GL_CLIP_PLANE0);
		nmEntityRenderer.render(allNMEntities, new Vector4f(0, 1, 0, 2147483647), lights, camera);
		GL11.glDisable(GL11.GL_CLIP_PLANE0);
		nmEntityShader.stop();
	}

	public void processEntities(List<Entity> entities) {
		for (Entity entity : entities)
			processEntity(entity);
	}

	public void processEntity(Entity entity) {
		
		Map<TexturedModel, List<Entity>> listToAdd = null;
		if(entity.getTexturedModel().getNormalMappingTexture() == null)
			listToAdd = allEntities;
		else
			listToAdd = allNMEntities;
		
		TexturedModel texturedModel = entity.getTexturedModel();
		List<Entity> batch = listToAdd.get(texturedModel);
		if (batch != null) {
			batch.add(entity);
		} else {
			List<Entity> newBatch = new ArrayList<Entity>();
			newBatch.add(entity);
			listToAdd.put(texturedModel, newBatch);
		}
		
	}

	public void processTerrains(List<Terrain> terrains) {
		for (Terrain terrain : terrains)
			processTerrain(terrain);
	}

	public void processTerrain(Terrain terrain) {
		this.allTerrains.add(terrain);
	}

	public static void EnableCulling() {
		GL11.glEnable(GL11.GL_CULL_FACE);
		GL11.glCullFace(GL11.GL_BACK);
	}

	public static void DisableCulling() {
		GL11.glDisable(GL11.GL_CULL_FACE);
	}

	public void prepare() {
		GL11.glEnable(GL11.GL_DEPTH_TEST);
		GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
		GL11.glClearColor(skyColor.x, skyColor.y, skyColor.z, 1);
	}

	public void cleanUp() {
		skyboxShader.cleanUp();
		terrainShader.cleanUp();
		entityShader.cleanUp();
		nmEntityShader.cleanUp();
	}

}
