package dev.engine.renderEngine.waters;

import org.lwjgl.util.vector.Matrix4f;

import dev.engine.entities.Camera;
import dev.engine.entities.Light;
import dev.engine.renderEngine.ShaderProgram;
import dev.engine.utils.Maths;

public class WaterShader extends ShaderProgram {
 
	private final static String VERTEX_FILE = "src/dev/engine/renderEngine/waters/waterVertexShader.glsl";
    private final static String FRAGMENT_FILE = "src/dev/engine/renderEngine/waters/waterFragmentShader.glsl";
 
    private int location_modelMatrix;
    private int location_viewMatrix;
    private int location_projectionMatrix;
    private int location_reflectionTexture;
    private int location_refractionTexture;
    private int location_dudvTexture;
    private int location_normalTexture;
    private int location_waterWaveMoveSpeed;
    private int location_waterWaveStrength;
    private int location_waterTilingFactor;
    private int location_cameraPosition;
    private int location_waterReflectivityFactor;
    private int location_lightPosition;
    private int location_lightColor;
    private int location_lightAttenuation;
 
    public WaterShader() {
        super(VERTEX_FILE, FRAGMENT_FILE);
    }
 
    @Override
    protected void bindAttributes() {
    	super.bindAttribute(0, "position");
    }
 
    @Override
    protected void getAllUniformLocations() {
        location_projectionMatrix = getUniformLocation("projectionMatrix");
        location_viewMatrix = getUniformLocation("viewMatrix");
        location_modelMatrix = getUniformLocation("modelMatrix");
        location_reflectionTexture = getUniformLocation("reflectionTexture");
        location_refractionTexture = getUniformLocation("refractionTexture");
        location_dudvTexture = getUniformLocation("dudvTexture");
        location_normalTexture = getUniformLocation("normalTexture");
        location_depthTexture = getUniformLocation("normalTexture");
        location_waterWaveMoveSpeed = getUniformLocation("waterWaveMoveSpeed");
        location_waterWaveStrength = getUniformLocation("waterWaveStrength");
        location_waterTilingFactor = getUniformLocation("waterTilingFactor");
        location_cameraPosition = getUniformLocation("cameraPosition");
        location_waterReflectivityFactor = getUniformLocation("waterReflectivityFactor");
        location_lightPosition = getUniformLocation("lightPosition");
        location_lightColor = getUniformLocation("lightColor");
        location_lightAttenuation = getUniformLocation("lightAttenuation");
    }
    
    @Override
	protected void connectTextureUnits() {
    	super.loadInt(location_reflectionTexture, 0);
    	super.loadInt(location_refractionTexture, 1);
    	super.loadInt(location_dudvTexture, 2);
    	super.loadInt(location_normalTexture, 3);
	}
    
    public void loadLight(Light light) {
    	super.loadVector3f(location_lightPosition, light.getPosition());
    	super.loadVector3f(location_lightColor, light.getColor());
    	super.loadVector3f(location_lightAttenuation, light.getAttenuation());
    }
    
    public void loadWaterWaveMoveSpeed(float waterWaveMoveSpeed) {
    	super.loadFloat(location_waterWaveMoveSpeed, waterWaveMoveSpeed);
    }
    
    public void loadWaterVariables(float waterTilingFactor, float waterWaveStrength, float waterReflectivityFactor) {
    	super.loadFloat(location_waterTilingFactor, waterTilingFactor);
    	super.loadFloat(location_waterWaveStrength, waterWaveStrength);
    	super.loadFloat(location_waterReflectivityFactor, waterReflectivityFactor);
    }
 
    public void loadProjectionMatrix(Matrix4f projectionMatrix) {
    	super.loadMatrix4f(location_projectionMatrix, projectionMatrix);
    }
     
    public void loadViewMatrix(Camera camera){
        Matrix4f viewMatrix = Maths.createViewMatrix(camera);
        super.loadMatrix4f(location_viewMatrix, viewMatrix);
        super.loadVector3f(location_cameraPosition, camera.getPosition());
    }
 
    public void loadModelMatrix(Matrix4f modelMatrix){
    	super.loadMatrix4f(location_modelMatrix, modelMatrix);
    }
 
}